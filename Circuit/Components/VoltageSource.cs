using ComputerAlgebra;
using System;
using System.ComponentModel;

namespace Circuit
{
    /// <summary>
    /// Ideal voltage source.
    /// </summary>
    [Category("Generic")]
    [DisplayName("Voltage Source")]
    [DefaultProperty("Voltage")]
    [Description("Ideal voltage source.")]
    public class VoltageSource : TwoTerminal
    {
        /// <summary>
        /// Expression for voltage V.
        /// </summary>
        private Quantity voltage = new Quantity(Call.Sin(100 * 2 * Math.PI * t), Units.V);
        [Serialize, Description("Voltage generated by this voltage source.")]
        public Quantity Voltage { get { return voltage; } set { if (voltage.Set(value)) NotifyChanged(nameof(Voltage)); } }

        public VoltageSource() { Name = "V1"; }

        public static void Analyze(Analysis Mna, string Name, Node Anode, Node Cathode, Expression V)
        {
            // Unknown current.
            Mna.AddPassiveComponent(Anode, Cathode, Mna.AddUnknown("i" + Name));

            V = Mna.AddUnknownEqualTo(V);

            // Set the voltage.
            Mna.AddEquation(Anode.V - Cathode.V, V);
        }
        public static void Analyze(Analysis Mna, string Name, Node Anode, Node Cathode, Expression V, Arrow InitialConditions)
        {
            Analyze(Mna, Name, Anode, Cathode, V);
            Mna.AddInitialConditions(InitialConditions);
        }
        public static void Analyze(Analysis Mna, Node Anode, Node Cathode, Expression V) { Analyze(Mna, Mna.AnonymousName(), Anode, Cathode, V); }
        public static void Analyze(Analysis Mna, Node Anode, Node Cathode, Expression V, Arrow InitialConditions) 
        { 
            Analyze(Mna, Mna.AnonymousName(), Anode, Cathode, V, InitialConditions); 
        }

        public override void Analyze(Analysis Mna) { Analyze(Mna, Name, Anode, Cathode, Voltage); }

        protected internal override void LayoutSymbol(SymbolLayout Sym)
        {
            base.LayoutSymbol(Sym);

            int r = 10;

            Sym.AddWire(Anode, new Coord(0, r));
            Sym.AddWire(Cathode, new Coord(0, -r));

            Sym.AddCircle(EdgeType.Black, new Coord(0, 0), r);
            Sym.DrawPositive(EdgeType.Black, new Coord(0, 7));
            Sym.DrawNegative(EdgeType.Black, new Coord(0, -7));
            if (!((Expression)Voltage is Constant))
                Sym.DrawFunction(
                    EdgeType.Black,
                    (t) => t * r * 0.75,
                    (t) => Math.Sin(t * 3.1415) * r * 0.5, -1, 1);

            Sym.DrawText(() => Voltage.ToString(), new Point(r * 0.7, r * 0.7), Alignment.Near, Alignment.Near);
            Sym.DrawText(() => Name, new Point(r * 0.7, r * -0.7), Alignment.Near, Alignment.Far);
        }
    }
}

